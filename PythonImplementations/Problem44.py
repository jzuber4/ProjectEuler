"""
    Problem 44:

    Problem Description:

    Pentagonal numbers are generated by the formula, P_n=n(3n-1)/2.
    The first ten pentagonal numbers are:

    1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However,
    their difference, 70 - 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, P_j and P_k, for which
    their sum and difference are pentagonal and D = |P_k - P_j|
    is minimised; what is the value of D?

    Problem Solution:
    Try first 3000 pentagonal numbers


"""
from itertools import combinations
from math import sqrt
def main():
    # function for pentagonals
    p = lambda(n): n * (3 * n - 1) / 2

    # inverse pentagonal
    def inv_pent(x):
        return (1 + sqrt(1 + 24 * x)) / 6

    # is pentagonal if inverse is int
    def is_pent(x):
        f = inv_pent(x)
        return f == int(f)

    # try all combinations of first 10,000 pentagonals
    candidates = map(lambda l: (l[0], l[1]),
                     combinations(map(p, range(1000, 3000)), 2))

    # test if sum and difference in pentagonals
    def test(a, b):
        return is_pent(a + b) and is_pent(abs(a - b))

    # find minimum of candidates among pentagonals
    print min(abs(a - b) for (a, b) in candidates if test(a, b))


main()
